// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: refunded_payment.go

package tgbotapi

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *RefundedPayment) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *RefundedPayment) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "currency":`)
	fflib.WriteJsonString(buf, string(j.Currency))
	buf.WriteString(`,"total_amount":`)
	fflib.FormatBits2(buf, uint64(j.TotalAmount), 10, j.TotalAmount < 0)
	buf.WriteString(`,"invoice_payload":`)
	fflib.WriteJsonString(buf, string(j.InvoicePayload))
	buf.WriteString(`,"telegram_payment_charge_id":`)
	fflib.WriteJsonString(buf, string(j.TelegramPaymentChargeID))
	buf.WriteByte(',')
	if len(j.ProviderPaymentChargeID) != 0 {
		buf.WriteString(`"provider_payment_charge_id":`)
		fflib.WriteJsonString(buf, string(j.ProviderPaymentChargeID))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtRefundedPaymentbase = iota
	ffjtRefundedPaymentnosuchkey

	ffjtRefundedPaymentCurrency

	ffjtRefundedPaymentTotalAmount

	ffjtRefundedPaymentInvoicePayload

	ffjtRefundedPaymentTelegramPaymentChargeID

	ffjtRefundedPaymentProviderPaymentChargeID
)

var ffjKeyRefundedPaymentCurrency = []byte("currency")

var ffjKeyRefundedPaymentTotalAmount = []byte("total_amount")

var ffjKeyRefundedPaymentInvoicePayload = []byte("invoice_payload")

var ffjKeyRefundedPaymentTelegramPaymentChargeID = []byte("telegram_payment_charge_id")

var ffjKeyRefundedPaymentProviderPaymentChargeID = []byte("provider_payment_charge_id")

// UnmarshalJSON umarshall json - template of ffjson
func (j *RefundedPayment) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *RefundedPayment) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtRefundedPaymentbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtRefundedPaymentnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyRefundedPaymentCurrency, kn) {
						currentKey = ffjtRefundedPaymentCurrency
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyRefundedPaymentInvoicePayload, kn) {
						currentKey = ffjtRefundedPaymentInvoicePayload
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyRefundedPaymentProviderPaymentChargeID, kn) {
						currentKey = ffjtRefundedPaymentProviderPaymentChargeID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyRefundedPaymentTotalAmount, kn) {
						currentKey = ffjtRefundedPaymentTotalAmount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRefundedPaymentTelegramPaymentChargeID, kn) {
						currentKey = ffjtRefundedPaymentTelegramPaymentChargeID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyRefundedPaymentProviderPaymentChargeID, kn) {
					currentKey = ffjtRefundedPaymentProviderPaymentChargeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRefundedPaymentTelegramPaymentChargeID, kn) {
					currentKey = ffjtRefundedPaymentTelegramPaymentChargeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRefundedPaymentInvoicePayload, kn) {
					currentKey = ffjtRefundedPaymentInvoicePayload
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRefundedPaymentTotalAmount, kn) {
					currentKey = ffjtRefundedPaymentTotalAmount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRefundedPaymentCurrency, kn) {
					currentKey = ffjtRefundedPaymentCurrency
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtRefundedPaymentnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtRefundedPaymentCurrency:
					goto handle_Currency

				case ffjtRefundedPaymentTotalAmount:
					goto handle_TotalAmount

				case ffjtRefundedPaymentInvoicePayload:
					goto handle_InvoicePayload

				case ffjtRefundedPaymentTelegramPaymentChargeID:
					goto handle_TelegramPaymentChargeID

				case ffjtRefundedPaymentProviderPaymentChargeID:
					goto handle_ProviderPaymentChargeID

				case ffjtRefundedPaymentnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Currency:

	/* handler: j.Currency type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Currency = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TotalAmount:

	/* handler: j.TotalAmount type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TotalAmount = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InvoicePayload:

	/* handler: j.InvoicePayload type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.InvoicePayload = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TelegramPaymentChargeID:

	/* handler: j.TelegramPaymentChargeID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TelegramPaymentChargeID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProviderPaymentChargeID:

	/* handler: j.ProviderPaymentChargeID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProviderPaymentChargeID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
