// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: config_reply_parameters.go

package tgbotapi

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *ReplyParameters) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ReplyParameters) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "message_id":`)
	fflib.FormatBits2(buf, uint64(j.MessageID), 10, j.MessageID < 0)
	buf.WriteString(`,"ChatIDInt":`)
	fflib.FormatBits2(buf, uint64(j.ChatIDInt), 10, j.ChatIDInt < 0)
	buf.WriteString(`,"ChatIDStr":`)
	fflib.WriteJsonString(buf, string(j.ChatIDStr))
	buf.WriteByte(',')
	if j.AllowSendingWithoutReply != false {
		if j.AllowSendingWithoutReply {
			buf.WriteString(`"allow_sending_without_reply":true`)
		} else {
			buf.WriteString(`"allow_sending_without_reply":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Quote) != 0 {
		buf.WriteString(`"quote":`)
		fflib.WriteJsonString(buf, string(j.Quote))
		buf.WriteByte(',')
	}
	if len(j.QuoteParseMode) != 0 {
		buf.WriteString(`"quote_parse_mode":`)
		fflib.WriteJsonString(buf, string(j.QuoteParseMode))
		buf.WriteByte(',')
	}
	if len(j.QuoteEntities) != 0 {
		buf.WriteString(`"quote_entities":`)
		if j.QuoteEntities != nil {
			buf.WriteString(`[`)
			for i, v := range j.QuoteEntities {
				if i != 0 {
					buf.WriteString(`,`)
				}
				/* Struct fall back. type=tgbotapi.MessageEntity kind=struct */
				err = buf.Encode(&v)
				if err != nil {
					return err
				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.QuotePosition != 0 {
		buf.WriteString(`"quote_position":`)
		fflib.FormatBits2(buf, uint64(j.QuotePosition), 10, j.QuotePosition < 0)
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtReplyParametersbase = iota
	ffjtReplyParametersnosuchkey

	ffjtReplyParametersMessageID

	ffjtReplyParametersChatIDInt

	ffjtReplyParametersChatIDStr

	ffjtReplyParametersAllowSendingWithoutReply

	ffjtReplyParametersQuote

	ffjtReplyParametersQuoteParseMode

	ffjtReplyParametersQuoteEntities

	ffjtReplyParametersQuotePosition
)

var ffjKeyReplyParametersMessageID = []byte("message_id")

var ffjKeyReplyParametersChatIDInt = []byte("ChatIDInt")

var ffjKeyReplyParametersChatIDStr = []byte("ChatIDStr")

var ffjKeyReplyParametersAllowSendingWithoutReply = []byte("allow_sending_without_reply")

var ffjKeyReplyParametersQuote = []byte("quote")

var ffjKeyReplyParametersQuoteParseMode = []byte("quote_parse_mode")

var ffjKeyReplyParametersQuoteEntities = []byte("quote_entities")

var ffjKeyReplyParametersQuotePosition = []byte("quote_position")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ReplyParameters) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ReplyParameters) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtReplyParametersbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtReplyParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffjKeyReplyParametersChatIDInt, kn) {
						currentKey = ffjtReplyParametersChatIDInt
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyReplyParametersChatIDStr, kn) {
						currentKey = ffjtReplyParametersChatIDStr
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'a':

					if bytes.Equal(ffjKeyReplyParametersAllowSendingWithoutReply, kn) {
						currentKey = ffjtReplyParametersAllowSendingWithoutReply
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyReplyParametersMessageID, kn) {
						currentKey = ffjtReplyParametersMessageID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffjKeyReplyParametersQuote, kn) {
						currentKey = ffjtReplyParametersQuote
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyReplyParametersQuoteParseMode, kn) {
						currentKey = ffjtReplyParametersQuoteParseMode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyReplyParametersQuoteEntities, kn) {
						currentKey = ffjtReplyParametersQuoteEntities
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyReplyParametersQuotePosition, kn) {
						currentKey = ffjtReplyParametersQuotePosition
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersQuotePosition, kn) {
					currentKey = ffjtReplyParametersQuotePosition
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersQuoteEntities, kn) {
					currentKey = ffjtReplyParametersQuoteEntities
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersQuoteParseMode, kn) {
					currentKey = ffjtReplyParametersQuoteParseMode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyReplyParametersQuote, kn) {
					currentKey = ffjtReplyParametersQuote
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersAllowSendingWithoutReply, kn) {
					currentKey = ffjtReplyParametersAllowSendingWithoutReply
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersChatIDStr, kn) {
					currentKey = ffjtReplyParametersChatIDStr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyReplyParametersChatIDInt, kn) {
					currentKey = ffjtReplyParametersChatIDInt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyReplyParametersMessageID, kn) {
					currentKey = ffjtReplyParametersMessageID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtReplyParametersnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtReplyParametersMessageID:
					goto handle_MessageID

				case ffjtReplyParametersChatIDInt:
					goto handle_ChatIDInt

				case ffjtReplyParametersChatIDStr:
					goto handle_ChatIDStr

				case ffjtReplyParametersAllowSendingWithoutReply:
					goto handle_AllowSendingWithoutReply

				case ffjtReplyParametersQuote:
					goto handle_Quote

				case ffjtReplyParametersQuoteParseMode:
					goto handle_QuoteParseMode

				case ffjtReplyParametersQuoteEntities:
					goto handle_QuoteEntities

				case ffjtReplyParametersQuotePosition:
					goto handle_QuotePosition

				case ffjtReplyParametersnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_MessageID:

	/* handler: j.MessageID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MessageID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChatIDInt:

	/* handler: j.ChatIDInt type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ChatIDInt = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChatIDStr:

	/* handler: j.ChatIDStr type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ChatIDStr = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AllowSendingWithoutReply:

	/* handler: j.AllowSendingWithoutReply type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.AllowSendingWithoutReply = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.AllowSendingWithoutReply = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Quote:

	/* handler: j.Quote type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Quote = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_QuoteParseMode:

	/* handler: j.QuoteParseMode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.QuoteParseMode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_QuoteEntities:

	/* handler: j.QuoteEntities type=[]tgbotapi.MessageEntity kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.QuoteEntities = nil
		} else {

			j.QuoteEntities = []MessageEntity{}

			wantVal := true

			for {

				var tmpJQuoteEntities MessageEntity

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJQuoteEntities type=tgbotapi.MessageEntity kind=struct quoted=false*/

				{
					/* Falling back. type=tgbotapi.MessageEntity kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmpJQuoteEntities)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				j.QuoteEntities = append(j.QuoteEntities, tmpJQuoteEntities)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_QuotePosition:

	/* handler: j.QuotePosition type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.QuotePosition = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
