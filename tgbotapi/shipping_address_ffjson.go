// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: shipping_address.go

package tgbotapi

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *ShippingAddress) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ShippingAddress) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"country_code":`)
	fflib.WriteJsonString(buf, string(j.CountryCode))
	buf.WriteByte(',')
	if len(j.State) != 0 {
		buf.WriteString(`"state":`)
		fflib.WriteJsonString(buf, string(j.State))
		buf.WriteByte(',')
	}
	buf.WriteString(`"city":`)
	fflib.WriteJsonString(buf, string(j.City))
	buf.WriteString(`,"street_line1":`)
	fflib.WriteJsonString(buf, string(j.StreetLine1))
	buf.WriteString(`,"street_line2":`)
	fflib.WriteJsonString(buf, string(j.StreetLine2))
	buf.WriteString(`,"post_code":`)
	fflib.WriteJsonString(buf, string(j.PostCode))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtShippingAddressbase = iota
	ffjtShippingAddressnosuchkey

	ffjtShippingAddressCountryCode

	ffjtShippingAddressState

	ffjtShippingAddressCity

	ffjtShippingAddressStreetLine1

	ffjtShippingAddressStreetLine2

	ffjtShippingAddressPostCode
)

var ffjKeyShippingAddressCountryCode = []byte("country_code")

var ffjKeyShippingAddressState = []byte("state")

var ffjKeyShippingAddressCity = []byte("city")

var ffjKeyShippingAddressStreetLine1 = []byte("street_line1")

var ffjKeyShippingAddressStreetLine2 = []byte("street_line2")

var ffjKeyShippingAddressPostCode = []byte("post_code")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ShippingAddress) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ShippingAddress) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtShippingAddressbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtShippingAddressnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyShippingAddressCountryCode, kn) {
						currentKey = ffjtShippingAddressCountryCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyShippingAddressCity, kn) {
						currentKey = ffjtShippingAddressCity
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyShippingAddressPostCode, kn) {
						currentKey = ffjtShippingAddressPostCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyShippingAddressState, kn) {
						currentKey = ffjtShippingAddressState
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyShippingAddressStreetLine1, kn) {
						currentKey = ffjtShippingAddressStreetLine1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyShippingAddressStreetLine2, kn) {
						currentKey = ffjtShippingAddressStreetLine2
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyShippingAddressPostCode, kn) {
					currentKey = ffjtShippingAddressPostCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyShippingAddressStreetLine2, kn) {
					currentKey = ffjtShippingAddressStreetLine2
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyShippingAddressStreetLine1, kn) {
					currentKey = ffjtShippingAddressStreetLine1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyShippingAddressCity, kn) {
					currentKey = ffjtShippingAddressCity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyShippingAddressState, kn) {
					currentKey = ffjtShippingAddressState
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyShippingAddressCountryCode, kn) {
					currentKey = ffjtShippingAddressCountryCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtShippingAddressnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtShippingAddressCountryCode:
					goto handle_CountryCode

				case ffjtShippingAddressState:
					goto handle_State

				case ffjtShippingAddressCity:
					goto handle_City

				case ffjtShippingAddressStreetLine1:
					goto handle_StreetLine1

				case ffjtShippingAddressStreetLine2:
					goto handle_StreetLine2

				case ffjtShippingAddressPostCode:
					goto handle_PostCode

				case ffjtShippingAddressnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CountryCode:

	/* handler: j.CountryCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_State:

	/* handler: j.State type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.State = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_City:

	/* handler: j.City type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.City = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StreetLine1:

	/* handler: j.StreetLine1 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.StreetLine1 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StreetLine2:

	/* handler: j.StreetLine2 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.StreetLine2 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PostCode:

	/* handler: j.PostCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PostCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
