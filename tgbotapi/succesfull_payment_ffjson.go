// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: succesfull_payment.go

package tgbotapi

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *SuccessfulPayment) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *SuccessfulPayment) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "subscription_expiration_date":`)
	fflib.FormatBits2(buf, uint64(j.SubscriptionExpirationDate), 10, j.SubscriptionExpirationDate < 0)
	buf.WriteByte(',')
	if j.IsRecurring != false {
		if j.IsRecurring {
			buf.WriteString(`"is_recurring":true`)
		} else {
			buf.WriteString(`"is_recurring":false`)
		}
		buf.WriteByte(',')
	}
	if j.IsFirstRecurring != false {
		if j.IsFirstRecurring {
			buf.WriteString(`"is_first_recurring":true`)
		} else {
			buf.WriteString(`"is_first_recurring":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.ShippingOptionID) != 0 {
		buf.WriteString(`"shipping_option_id":`)
		fflib.WriteJsonString(buf, string(j.ShippingOptionID))
		buf.WriteByte(',')
	}
	if j.OrderInfo != nil {
		if true {
			buf.WriteString(`"order_info":`)

			{

				err = j.OrderInfo.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"currency":`)
	fflib.WriteJsonString(buf, string(j.Currency))
	buf.WriteString(`,"total_amount":`)
	fflib.FormatBits2(buf, uint64(j.TotalAmount), 10, j.TotalAmount < 0)
	buf.WriteString(`,"invoice_payload":`)
	fflib.WriteJsonString(buf, string(j.InvoicePayload))
	buf.WriteString(`,"telegram_payment_charge_id":`)
	fflib.WriteJsonString(buf, string(j.TelegramPaymentChargeID))
	buf.WriteByte(',')
	if len(j.ProviderPaymentChargeID) != 0 {
		buf.WriteString(`"provider_payment_charge_id":`)
		fflib.WriteJsonString(buf, string(j.ProviderPaymentChargeID))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtSuccessfulPaymentbase = iota
	ffjtSuccessfulPaymentnosuchkey

	ffjtSuccessfulPaymentSubscriptionExpirationDate

	ffjtSuccessfulPaymentIsRecurring

	ffjtSuccessfulPaymentIsFirstRecurring

	ffjtSuccessfulPaymentShippingOptionID

	ffjtSuccessfulPaymentOrderInfo

	ffjtSuccessfulPaymentCurrency

	ffjtSuccessfulPaymentTotalAmount

	ffjtSuccessfulPaymentInvoicePayload

	ffjtSuccessfulPaymentTelegramPaymentChargeID

	ffjtSuccessfulPaymentProviderPaymentChargeID
)

var ffjKeySuccessfulPaymentSubscriptionExpirationDate = []byte("subscription_expiration_date")

var ffjKeySuccessfulPaymentIsRecurring = []byte("is_recurring")

var ffjKeySuccessfulPaymentIsFirstRecurring = []byte("is_first_recurring")

var ffjKeySuccessfulPaymentShippingOptionID = []byte("shipping_option_id")

var ffjKeySuccessfulPaymentOrderInfo = []byte("order_info")

var ffjKeySuccessfulPaymentCurrency = []byte("currency")

var ffjKeySuccessfulPaymentTotalAmount = []byte("total_amount")

var ffjKeySuccessfulPaymentInvoicePayload = []byte("invoice_payload")

var ffjKeySuccessfulPaymentTelegramPaymentChargeID = []byte("telegram_payment_charge_id")

var ffjKeySuccessfulPaymentProviderPaymentChargeID = []byte("provider_payment_charge_id")

// UnmarshalJSON umarshall json - template of ffjson
func (j *SuccessfulPayment) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *SuccessfulPayment) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtSuccessfulPaymentbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtSuccessfulPaymentnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeySuccessfulPaymentCurrency, kn) {
						currentKey = ffjtSuccessfulPaymentCurrency
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeySuccessfulPaymentIsRecurring, kn) {
						currentKey = ffjtSuccessfulPaymentIsRecurring
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySuccessfulPaymentIsFirstRecurring, kn) {
						currentKey = ffjtSuccessfulPaymentIsFirstRecurring
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySuccessfulPaymentInvoicePayload, kn) {
						currentKey = ffjtSuccessfulPaymentInvoicePayload
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeySuccessfulPaymentOrderInfo, kn) {
						currentKey = ffjtSuccessfulPaymentOrderInfo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeySuccessfulPaymentProviderPaymentChargeID, kn) {
						currentKey = ffjtSuccessfulPaymentProviderPaymentChargeID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeySuccessfulPaymentSubscriptionExpirationDate, kn) {
						currentKey = ffjtSuccessfulPaymentSubscriptionExpirationDate
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySuccessfulPaymentShippingOptionID, kn) {
						currentKey = ffjtSuccessfulPaymentShippingOptionID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeySuccessfulPaymentTotalAmount, kn) {
						currentKey = ffjtSuccessfulPaymentTotalAmount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySuccessfulPaymentTelegramPaymentChargeID, kn) {
						currentKey = ffjtSuccessfulPaymentTelegramPaymentChargeID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeySuccessfulPaymentProviderPaymentChargeID, kn) {
					currentKey = ffjtSuccessfulPaymentProviderPaymentChargeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySuccessfulPaymentTelegramPaymentChargeID, kn) {
					currentKey = ffjtSuccessfulPaymentTelegramPaymentChargeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySuccessfulPaymentInvoicePayload, kn) {
					currentKey = ffjtSuccessfulPaymentInvoicePayload
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySuccessfulPaymentTotalAmount, kn) {
					currentKey = ffjtSuccessfulPaymentTotalAmount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySuccessfulPaymentCurrency, kn) {
					currentKey = ffjtSuccessfulPaymentCurrency
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeySuccessfulPaymentOrderInfo, kn) {
					currentKey = ffjtSuccessfulPaymentOrderInfo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySuccessfulPaymentShippingOptionID, kn) {
					currentKey = ffjtSuccessfulPaymentShippingOptionID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySuccessfulPaymentIsFirstRecurring, kn) {
					currentKey = ffjtSuccessfulPaymentIsFirstRecurring
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySuccessfulPaymentIsRecurring, kn) {
					currentKey = ffjtSuccessfulPaymentIsRecurring
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySuccessfulPaymentSubscriptionExpirationDate, kn) {
					currentKey = ffjtSuccessfulPaymentSubscriptionExpirationDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtSuccessfulPaymentnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtSuccessfulPaymentSubscriptionExpirationDate:
					goto handle_SubscriptionExpirationDate

				case ffjtSuccessfulPaymentIsRecurring:
					goto handle_IsRecurring

				case ffjtSuccessfulPaymentIsFirstRecurring:
					goto handle_IsFirstRecurring

				case ffjtSuccessfulPaymentShippingOptionID:
					goto handle_ShippingOptionID

				case ffjtSuccessfulPaymentOrderInfo:
					goto handle_OrderInfo

				case ffjtSuccessfulPaymentCurrency:
					goto handle_Currency

				case ffjtSuccessfulPaymentTotalAmount:
					goto handle_TotalAmount

				case ffjtSuccessfulPaymentInvoicePayload:
					goto handle_InvoicePayload

				case ffjtSuccessfulPaymentTelegramPaymentChargeID:
					goto handle_TelegramPaymentChargeID

				case ffjtSuccessfulPaymentProviderPaymentChargeID:
					goto handle_ProviderPaymentChargeID

				case ffjtSuccessfulPaymentnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_SubscriptionExpirationDate:

	/* handler: j.SubscriptionExpirationDate type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.SubscriptionExpirationDate = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsRecurring:

	/* handler: j.IsRecurring type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsRecurring = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsRecurring = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsFirstRecurring:

	/* handler: j.IsFirstRecurring type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsFirstRecurring = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsFirstRecurring = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ShippingOptionID:

	/* handler: j.ShippingOptionID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ShippingOptionID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderInfo:

	/* handler: j.OrderInfo type=tgbotapi.OrderInfo kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.OrderInfo = nil

		} else {

			if j.OrderInfo == nil {
				j.OrderInfo = new(OrderInfo)
			}

			err = j.OrderInfo.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Currency:

	/* handler: j.Currency type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Currency = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TotalAmount:

	/* handler: j.TotalAmount type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TotalAmount = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InvoicePayload:

	/* handler: j.InvoicePayload type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.InvoicePayload = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TelegramPaymentChargeID:

	/* handler: j.TelegramPaymentChargeID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TelegramPaymentChargeID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProviderPaymentChargeID:

	/* handler: j.ProviderPaymentChargeID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProviderPaymentChargeID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
