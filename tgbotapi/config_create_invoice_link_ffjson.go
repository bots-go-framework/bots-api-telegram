// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: config_create_invoice_link.go

package tgbotapi

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *CreateInvoiceLinkConfig) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *CreateInvoiceLinkConfig) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(j.BusinessConnectionID) != 0 {
		buf.WriteString(`"business_connection_id":`)
		fflib.WriteJsonString(buf, string(j.BusinessConnectionID))
		buf.WriteByte(',')
	}
	if j.ChatID != 0 {
		buf.WriteString(`"chat_id":`)
		fflib.FormatBits2(buf, uint64(j.ChatID), 10, j.ChatID < 0)
		buf.WriteByte(',')
	}
	if len(j.ChannelUsername) != 0 {
		buf.WriteString(`"channel_username":`)
		fflib.WriteJsonString(buf, string(j.ChannelUsername))
		buf.WriteByte(',')
	}
	if j.ReplyToMessageID != 0 {
		buf.WriteString(`"reply_to_message_id":`)
		fflib.FormatBits2(buf, uint64(j.ReplyToMessageID), 10, j.ReplyToMessageID < 0)
		buf.WriteByte(',')
	}
	if j.ReplyMarkup != nil {
		buf.WriteString(`"reply_markup":`)
		/* Interface types must use runtime reflection. type=interface {} kind=interface */
		err = buf.Encode(j.ReplyMarkup)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.DisableNotification != false {
		if j.DisableNotification {
			buf.WriteString(`"disable_notification":true`)
		} else {
			buf.WriteString(`"disable_notification":false`)
		}
		buf.WriteByte(',')
	}
	if j.ProtectContent != false {
		if j.ProtectContent {
			buf.WriteString(`"protect_content":true`)
		} else {
			buf.WriteString(`"protect_content":false`)
		}
		buf.WriteByte(',')
	}
	if j.MessageThreadID != 0 {
		buf.WriteString(`"message_thread_id":`)
		fflib.FormatBits2(buf, uint64(j.MessageThreadID), 10, j.MessageThreadID < 0)
		buf.WriteByte(',')
	}
	if len(j.MessageEffectID) != 0 {
		buf.WriteString(`"message_effect_id":`)
		fflib.WriteJsonString(buf, string(j.MessageEffectID))
		buf.WriteByte(',')
	}
	if j.AllowPaidBroadcast != false {
		if j.AllowPaidBroadcast {
			buf.WriteString(`"allow_paid_broadcast":true`)
		} else {
			buf.WriteString(`"allow_paid_broadcast":false`)
		}
		buf.WriteByte(',')
	}
	if j.ReplyParameters != nil {
		if true {
			/* Struct fall back. type=tgbotapi.ReplyParameters kind=struct */
			buf.WriteString(`"reply_parameters":`)
			err = buf.Encode(j.ReplyParameters)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtCreateInvoiceLinkConfigbase = iota
	ffjtCreateInvoiceLinkConfignosuchkey

	ffjtCreateInvoiceLinkConfigBusinessConnectionID

	ffjtCreateInvoiceLinkConfigChatID

	ffjtCreateInvoiceLinkConfigChannelUsername

	ffjtCreateInvoiceLinkConfigReplyToMessageID

	ffjtCreateInvoiceLinkConfigReplyMarkup

	ffjtCreateInvoiceLinkConfigDisableNotification

	ffjtCreateInvoiceLinkConfigProtectContent

	ffjtCreateInvoiceLinkConfigMessageThreadID

	ffjtCreateInvoiceLinkConfigMessageEffectID

	ffjtCreateInvoiceLinkConfigAllowPaidBroadcast

	ffjtCreateInvoiceLinkConfigReplyParameters
)

var ffjKeyCreateInvoiceLinkConfigBusinessConnectionID = []byte("business_connection_id")

var ffjKeyCreateInvoiceLinkConfigChatID = []byte("chat_id")

var ffjKeyCreateInvoiceLinkConfigChannelUsername = []byte("channel_username")

var ffjKeyCreateInvoiceLinkConfigReplyToMessageID = []byte("reply_to_message_id")

var ffjKeyCreateInvoiceLinkConfigReplyMarkup = []byte("reply_markup")

var ffjKeyCreateInvoiceLinkConfigDisableNotification = []byte("disable_notification")

var ffjKeyCreateInvoiceLinkConfigProtectContent = []byte("protect_content")

var ffjKeyCreateInvoiceLinkConfigMessageThreadID = []byte("message_thread_id")

var ffjKeyCreateInvoiceLinkConfigMessageEffectID = []byte("message_effect_id")

var ffjKeyCreateInvoiceLinkConfigAllowPaidBroadcast = []byte("allow_paid_broadcast")

var ffjKeyCreateInvoiceLinkConfigReplyParameters = []byte("reply_parameters")

// UnmarshalJSON umarshall json - template of ffjson
func (j *CreateInvoiceLinkConfig) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *CreateInvoiceLinkConfig) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtCreateInvoiceLinkConfigbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtCreateInvoiceLinkConfignosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigAllowPaidBroadcast, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigAllowPaidBroadcast
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigBusinessConnectionID, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigBusinessConnectionID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigChatID, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigChatID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCreateInvoiceLinkConfigChannelUsername, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigChannelUsername
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigDisableNotification, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigDisableNotification
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigMessageThreadID, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigMessageThreadID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCreateInvoiceLinkConfigMessageEffectID, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigMessageEffectID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigProtectContent, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigProtectContent
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyCreateInvoiceLinkConfigReplyToMessageID, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigReplyToMessageID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCreateInvoiceLinkConfigReplyMarkup, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigReplyMarkup
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCreateInvoiceLinkConfigReplyParameters, kn) {
						currentKey = ffjtCreateInvoiceLinkConfigReplyParameters
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigReplyParameters, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigReplyParameters
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigAllowPaidBroadcast, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigAllowPaidBroadcast
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigMessageEffectID, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigMessageEffectID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigMessageThreadID, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigMessageThreadID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyCreateInvoiceLinkConfigProtectContent, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigProtectContent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigDisableNotification, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigDisableNotification
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigReplyMarkup, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigReplyMarkup
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigReplyToMessageID, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigReplyToMessageID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigChannelUsername, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigChannelUsername
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyCreateInvoiceLinkConfigChatID, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigChatID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCreateInvoiceLinkConfigBusinessConnectionID, kn) {
					currentKey = ffjtCreateInvoiceLinkConfigBusinessConnectionID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtCreateInvoiceLinkConfignosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtCreateInvoiceLinkConfigBusinessConnectionID:
					goto handle_BusinessConnectionID

				case ffjtCreateInvoiceLinkConfigChatID:
					goto handle_ChatID

				case ffjtCreateInvoiceLinkConfigChannelUsername:
					goto handle_ChannelUsername

				case ffjtCreateInvoiceLinkConfigReplyToMessageID:
					goto handle_ReplyToMessageID

				case ffjtCreateInvoiceLinkConfigReplyMarkup:
					goto handle_ReplyMarkup

				case ffjtCreateInvoiceLinkConfigDisableNotification:
					goto handle_DisableNotification

				case ffjtCreateInvoiceLinkConfigProtectContent:
					goto handle_ProtectContent

				case ffjtCreateInvoiceLinkConfigMessageThreadID:
					goto handle_MessageThreadID

				case ffjtCreateInvoiceLinkConfigMessageEffectID:
					goto handle_MessageEffectID

				case ffjtCreateInvoiceLinkConfigAllowPaidBroadcast:
					goto handle_AllowPaidBroadcast

				case ffjtCreateInvoiceLinkConfigReplyParameters:
					goto handle_ReplyParameters

				case ffjtCreateInvoiceLinkConfignosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_BusinessConnectionID:

	/* handler: j.BusinessConnectionID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.BusinessConnectionID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChatID:

	/* handler: j.ChatID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ChatID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChannelUsername:

	/* handler: j.ChannelUsername type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ChannelUsername = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyToMessageID:

	/* handler: j.ReplyToMessageID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ReplyToMessageID = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyMarkup:

	/* handler: j.ReplyMarkup type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.ReplyMarkup)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableNotification:

	/* handler: j.DisableNotification type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.DisableNotification = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.DisableNotification = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProtectContent:

	/* handler: j.ProtectContent type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.ProtectContent = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.ProtectContent = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageThreadID:

	/* handler: j.MessageThreadID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MessageThreadID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageEffectID:

	/* handler: j.MessageEffectID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MessageEffectID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AllowPaidBroadcast:

	/* handler: j.AllowPaidBroadcast type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.AllowPaidBroadcast = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.AllowPaidBroadcast = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyParameters:

	/* handler: j.ReplyParameters type=tgbotapi.ReplyParameters kind=struct quoted=false*/

	{
		/* Falling back. type=tgbotapi.ReplyParameters kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.ReplyParameters)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
